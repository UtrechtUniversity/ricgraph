# ########################################################################
#
# Ricgraph - Research in context graph
#
# ########################################################################
#
# MIT License
# 
# Copyright (c) 2024 Rik D.T. Janssen
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# ########################################################################
#
# Export nodes and edges to a csv file.
# This is a "raw" export, because person-root nodes are also exported, as
# are the connections between e.g. an ORCID node and its person-root node.
# When you import the export generated by this script, all nodes and edges
# will be inserted directly in the graph database backend using a Cypher
# query. That means that no checking is done at all if the resulting nodes
# and edges conform to the Ricgraph model. This may result in a graph
# not consistent with the Ricgraph model. Due to this, Ricgraph Explorer
# may not work as expected.
#
# If you export a large number of nodes or edges, this script may crash due
# to shortage of memory. In that case, you may want to set the limit
# MAX_NR_ITEMS_TO_EXPORT.
#
# This script forms a pair with ricgraph_import_raw_from_csv.py.
#
# Original version Rik D.T. Janssen, October 2024.
#
# ########################################################################
#
# Usage
# ricgraph_export_raw_to_csv.py [options]
#
# Options:
#   --filename <filename>
#           Export all nodes and edges in Ricgraph
#           to a csv file starting with <filename>.
#
# ########################################################################

import sys
import pandas
import ricgraph as rcg


MAX_NR_ITEMS_TO_EXPORT = 0               # 0 = all records

# Extension of nodes and edges filename.
FILENAME_NODES_EXTENSION = '-nodes.csv'
FILENAME_EDGES_EXTENSION = '-edges.csv'


# ############################################
# ################### main ###################
# ############################################
rcg.print_commandline_arguments(argument_list=sys.argv)
filename = rcg.get_commandline_argument(argument='--filename',
                                                 argument_list=sys.argv)
if filename == '':
    print('\nYou need to specify a filename. This name will be used for')
    print('exporting the nodes and edges.')
    print('If you enter an empty value, this script will exit.')
    filename = input('Please specify this filename: ')
    if filename == '':
        print('Exiting.\n')
        exit(1)

filename_nodes = filename + FILENAME_NODES_EXTENSION
filename_edges = filename + FILENAME_EDGES_EXTENSION
print('Filename used for nodes: "' + filename_nodes + '", for edges: "'
      + filename_edges + '".')

print('\nPreparing graph...')
graph = rcg.open_ricgraph()

nr_nodes = rcg.ricgraph_nr_nodes()
nr_edges = rcg.ricgraph_nr_edges()
print('\nThere are ' + str(nr_nodes) + ' nodes and ' + str(nr_edges) + ' edges.')
print('If you export a large number of nodes or edges, this script may crash due to')
print('shortage of memory. In that case, you may want to set a limit in this script.\n')

# ### Start with exporting nodes.
all_properties = rcg.RICGRAPH_PROPERTIES_STANDARD \
                 + rcg.RICGRAPH_PROPERTIES_ADDITIONAL \
                 + rcg.RICGRAPH_PROPERTIES_HIDDEN
as_phrase = ', '.join(str('node.' + prop + ' AS ' + prop) for prop in all_properties)

# Construct Cypher query to get all nodes.
if int(MAX_NR_ITEMS_TO_EXPORT) > 0:
    print('Getting properties for ' + str(MAX_NR_ITEMS_TO_EXPORT) + ' nodes...\n')
else:
    print('Getting properties for ' + str(nr_nodes) + ' nodes...\n')
cypher_query = 'MATCH (node:RicgraphNode) '
cypher_query += 'RETURN '
cypher_query += as_phrase
if int(MAX_NR_ITEMS_TO_EXPORT) > 0:
    cypher_query += ' LIMIT ' + str(MAX_NR_ITEMS_TO_EXPORT)
# print (cypher_query)
result_nodes, _, _ = graph.execute_query(query_=cypher_query,
                                         database_=rcg.ricgraph_databasename())
data_nodes = [record.data() for record in result_nodes]  # Extract data from records.
df_nodes = pandas.DataFrame(data_nodes)                  # Create Dataframe.
print(df_nodes)
rcg.write_dataframe_to_csv(filename=filename_nodes, df=df_nodes)
print('Done.\n')

# ### Then export edges.
# Construct Cypher query to get all edges.
if int(MAX_NR_ITEMS_TO_EXPORT) > 0:
    print('Getting start and end nodes for ' + str(MAX_NR_ITEMS_TO_EXPORT) + ' edges...\n')
else:
    print('Getting start and end nodes for ' + str(nr_edges) + ' edges...\n')
cypher_query = 'MATCH (node_from:RicgraphNode)-[]->(node_to:RicgraphNode) '
cypher_query += 'RETURN '
cypher_query += 'node_from.name AS name_from, '
cypher_query += 'node_from.value AS value_from, '
cypher_query += 'node_to.name AS name_to, '
cypher_query += 'node_to.value AS value_to '
if int(MAX_NR_ITEMS_TO_EXPORT) > 0:
    cypher_query += ' LIMIT ' + str(MAX_NR_ITEMS_TO_EXPORT)
# print (cypher_query)
print('Getting start and end nodes for ' + str(nr_edges) + ' edges...\n')
result_edges, _, _ = graph.execute_query(query_=cypher_query,
                                         database_=rcg.ricgraph_databasename())
data_edges = [record.data() for record in result_edges]  # Extract data from records.
df_edges = pandas.DataFrame(data_edges)                  # Create Dataframe.
print(df_edges)
rcg.write_dataframe_to_csv(filename=filename_edges, df=df_edges)
print('Done.\n')

rcg.close_ricgraph()
